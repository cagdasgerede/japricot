require "test/unit"
require 'rubygems'
require 'hpricot'
require 'parser'

class TestParsing < Test::Unit::TestCase
	
	def _test_class config
		doc = Parser.prepare config[:file]
		methods = Parser.parse_class( doc )
		assert_equal( config[:methods].size, methods.size, "Number of methods do not match" )
		methods.each_with_index do |e,i|
			expected = config[:methods][i]
			#puts "testdef: #{expected[:method]} --- parsed: #{e[:name]}"
			_assert expected, e
		end
	end

	def test_ZipFile
		config = {:file => 'classes/ZipFile.html',
			:methods=>[
				{:method=> 'getEntry',
				:params=> ['java.lang.String'],
				:returns=>'java.util.zip.ZipEntry',
				:type => nil
				},
				{:method=> 'getInputStream',
				:params=> ['java.util.zip.ZipEntry'],
				:returns=>'java.io.InputStream',
				:type => nil
				},
				{:method=> 'getName',
				:params=> [],
				:returns=>'java.lang.String',
				:type => nil
				},
				{:method=> 'entries',
				:params=> [],
				:returns=>'java.util.Enumeration', #::java.util.zip.ZipEntry',
				:type => nil
				},
				{:method=> 'drainTo',
				:params=> ['java.util.Collection'],
				:returns=>'int',
				:type => nil
				},
				{:method=> 'size',
				:params=> [],
				:returns=>'int',
				:type => nil
				},
				{:method=> 'close',
				:params=> [],
				:returns=>'void',
				:type => nil
				},
				{:method=> 'finalize',
				:params=> [],
				:returns=>'void',
				:type => nil
				},
			]}
		_test_class config
	end	

	def test_HTML
		config = {:file => 'classes/HTML.html',
			:methods=>[
				{:method=> 'getAllTags',
				:params=> [],
				:returns=>'javax.swing.text.html.HTML.Tag[]',
				:type => 'static'
				},
				{:method=> 'getTag',
				:params=> [ 'java.lang.String'],
				:returns=> 'javax.swing.text.html.HTML.Tag',
				:type => 'static'
				},
				{:method=> 'getIntegerAttributeValue',
				:params=> ['javax.swing.text.AttributeSet', 'javax.swing.text.html.HTML.Attribute', 'int' ],
				:returns=> 'int',
				:type => 'static'
				},
				{:method=> 'getAllAttributeKeys',
				:params=> [],
				:returns=>'javax.swing.text.html.HTML.Attribute[]',
				:type => 'static'
				},
				{:method=> 'setExtra',
				:params=> [ 'byte[]'],
				:returns=>'void',
				:type => nil
				},
				{:method=> 'getAttributeKey',
				:params=> [ 'java.lang.String'],
				:returns=>'javax.swing.text.html.HTML.Attribute',
				:type => 'static'
				},
			]}
		_test_class config
	end

	def test_BitVector
		config = {:file => 'classes/BitVector.html',
			:methods=>[
				{:method=> 'at',
				:params=> ['int'],
				:returns=>'int',
				:type => nil
				},
				{:method=> 'size',
				:params=> [],
				:returns=>'int',
				:type => nil
				},
				{:method=> 'sizeInBytes',
				:params=> [],
				:returns=>'int',
				:type => nil
				},
				{:method=> 'appendBit',
				:params=> [ 'int'],
				:returns=>'void',
				:type => nil
				},
				{:method=> 'appendBits',
				:params=> [ 'int', 'int'],
				:returns=>'void',
				:type => nil
				},
				{:method=> 'appendBitVector',
				:params=> [ 'com.google.zxing.qrcode.encoder.BitVector'],
				:returns=>'void',
				:type => nil
				},
				{:method=> 'xor',
				:params=> [ 'com.google.zxing.qrcode.encoder.BitVector'],
				:returns=>'void',
				:type => nil
				},
				{:method=> 'toString',
				:params=> [],
				:returns=>'java.lang.String',
				:type => nil
				},
				{:method=> 'getArray',
				:params=> [],
				:returns=>'byte[]',
				:type => nil
				}
			]}
		_test_class config
	end
	
	def test_BarcodeDecoder
		config = {:file => 'classes/BarcodeDecoder.html',
			:methods=>[
			]}
		_test_class config
	end

	def test_AlertListener
		config = {:file => 'classes/AlertListener.html',
			:methods=>[
				{:method=> 'audioDone',
				:params=> ['int'],
				:returns=>'void',
				:type => nil
				},
				{:method=> 'buzzerDone',
				:params=> ['int'],
				:returns=>'void',
				:type => nil
				},
				{:method=> 'vibrateDone',
				:params=> ['int'],
				:returns=>'void',
				:type => nil
				}
			]}
		_test_class config
	end

	def test_AccelerometerSensor
		config = {:file => 'classes/AccelerometerSensor.html',
			:methods=>[
				{:method=> 'isSupported',
				:params=> [],
				:returns=>'boolean',
				:type => 'static'
				},
				{:method=> 'openOrientationDataChannel',
				:params=> ['net.rim.device.api.system.Application'],
				:returns=>'net.rim.device.api.system.AccelerometerSensor.Channel',
				:type => 'static'
				},
				{:method=> 'openRawDataChannel',
				:params=> ['net.rim.device.api.system.Application'],
				:returns=>'net.rim.device.api.system.AccelerometerSensor.Channel',
				:type => 'static'
				},
				{:method=> 'openChannel',
				:params=> ['net.rim.device.api.system.Application',
					'net.rim.device.api.system.AccelerometerChannelConfig'],
				:returns=>'net.rim.device.api.system.AccelerometerSensor.Channel',
				:type => 'static'
				}
			]}
		_test_class config
	end

	def test_AbstractView
		config = {:file => 'classes/AbstractView.html',
			:methods=>[
				{:method=> 'getDocument',
				:params=> [],
				:returns=>'org.w3c.dom.views.DocumentView',
				:type => nil
				}
			]}
		_test_class config
	end

	def _test config
		doc = Parser.prepare config[:file]
		method = {}
		Parser.parse_single doc, method 
		_assert config, method
	end	

	def _assert expected, method
		assert_equal( expected[:method], method[:name], 'method name' ) 
		assert_equal( expected[:params], method[:params], "method:#{method[:name]} - parameters:" )
		assert_equal( expected[:returns], method[:returns], "method:#{method[:name]} - return type:" )
		assert_equal( expected[:type], method[:type], "method:#{method[:name]} - type:" )
	end	
 
	def test_Test1
		config = {:file => 'Test1.txt', 
			:method => 'format', 
			:params => ["java.util.Locale", "java.lang.String", "java.lang.Object..."],
			:returns => "java.lang.String",
			:type => 'static' }
		_test config
	end

	def test_Test2
		config = {:file => 'Test2.txt', 
			:method => 'valueOf', 
			:params => ["java.lang.Object"],
			:returns => 'java.lang.String',
			:type => 'static'}
		_test config
	end

	def test_Test3
		config = {:file => 'Test3.txt', 
			:method => 'valueOf', 
			:params => ["char[]"],
			:returns => 'java.lang.String',
			:type => 'static' }
		_test config		
	end

	def test_Test4
		config = {:file => 'Test4.txt', 
			:method => 'valueOf', 
			:params => ["long"],
			:returns => 'java.lang.String',
			:type => 'static' }
		_test config		
	end

	def test_Test5
		config = {:file => 'Test5.txt', 
			:method => 'intern', 
			:params => [],
			:returns => 'java.lang.String' }
		_test config		
	end

	def test_Test6
		config = {:file => 'Test6.txt', 
			:method => 'indexOf', 
			:params => ["java.lang.String", "int"],
			:returns => 'int'}
		_test config		
	end

	def test_Test7
		config = {:file => 'Test7.txt', 
			:method => 'isEmpty', 
			:params => [],
			:returns => 'boolean' }
		_test config		
	end

	def test_Test8
		config = {:file => 'Test8.txt', 
			:method => 'create', 
			:params => ["net.rim.device.api.system.Bitmap"],
			:returns => 'net.rim.device.api.ui.Graphics',
			:type => 'static' }
		_test config		
	end

	def test_Test9
		config = {:file => 'Test9.txt', 
			:method => 'clear', 
			:params => [],
			:returns => 'void' }
		_test config		
	end
end
